---
- name: Install required packages
  yum:
    name:
      - openssh-clients
      - openssh-server
      - rsync
      - glusterfs-geo-replication
    state: latest
  delegate_to: "{{ item }}"
  with_items:
    - "{{ inventory_hostname }}"
    - "{{ glusterfs_cluster_members }}"
    - "{{ glusterfs_slave_members }}"

- name: Create the group {{ glusterfs_georeplication_group }} for the geo-replication
  group:
    name: "{{ glusterfs_georeplication_group }}"
  delegate_to: "{{ item }}"
  when: "glusterfs_manage_users"
  with_items:
    - "{{ glusterfs_slave_members }}"

- name: Create user {{ glusterfs_georeplication_user }} for the geo-replication
  user:
    name: "{{ glusterfs_georeplication_user }}"
    group: "{{ glusterfs_georeplication_group }}"
  delegate_to: "{{ item }}"
  when: "glusterfs_manage_users"
  with_items:
    - "{{ glusterfs_slave_members }}"

- name: Make sure sshd is started on the slaves
  systemd:
    name: sshd
    state: started
  delegate_to: "{{ item }}"
  with_items:
    - "{{ glusterfs_slave_members }}"

- name: Check mountbrokers config
  shell: gluster-mountbroker status | grep -e 'UP.*{{ glusterfs_georeplication_mountbroker_path }}(OK).*{{ glusterfs_georeplication_group }}(OK).*{{ glusterfs_georeplication_user }}.*{{ item.slave_volume }}'
  ignore_errors: true
  changed_when: false
  with_items: "{{ glusterfs_georeplication_volumes }}"
  register: mountbrokers_status
  delegate_to: "{{ glusterfs_slave_members[0] }}"

- name: Setup mountbroker root directory
  shell: "gluster-mountbroker setup {{ glusterfs_georeplication_mountbroker_path }} {{ glusterfs_georeplication_group }}"
  when: "item.stdout_lines | length != glusterfs_slave_members | length"
  with_items: "{{ mountbrokers_status.results }}"
  delegate_to: "{{ glusterfs_slave_members[0] }}"
  notify:
    - restart glusterd slaves

- name: Add a volume to the mountbroker
  shell: gluster-mountbroker add {{ item.item.slave_volume }} {{ glusterfs_georeplication_user }}
  when: "item.stdout_lines | length != glusterfs_slave_members | length"
  with_items: "{{ mountbrokers_status.results }}"
  delegate_to: "{{ glusterfs_slave_members[0] }}"
  notify:
    - restart glusterd slaves

- name: Flush handlers
  meta: flush_handlers

- name: Generate ssh-key for accessing the slaves with the {{ glusterfs_georeplication_user }} user
  shell: ssh-keygen -t rsa -N "" -f $HOME/.ssh/id_rsa
  register: generate_ssh_key
  changed_when: "'already exists' not in generate_ssh_key.stdout"
  failed_when:
    - "generate_ssh_key.rc != 0"
    - "'already exists' not in generate_ssh_key.stdout"

- name: Retrieving the pubkey
  shell: cat $HOME/.ssh/id_rsa.pub
  register: pubkey
  changed_when: false

- name: Setting up the key on one slave for the {{ glusterfs_georeplication_user }} user
  authorized_key:
    user: geoaccount
    key: "{{ pubkey.stdout_lines[0] }}"
  delegate_to: "{{ glusterfs_slave_members[0] }}"

- name: Generate the pem restricted keys on the masters
  shell : gluster-georep-sshkey generate
  changed_when: false

- name: Push the key and create session for each geo-replicated volumes
  shell: "gluster volume geo-replication {{ item.master_volume }} geoaccount@{{ glusterfs_slave_members[0] }}::{{ item.slave_volume }} create push-pem"
  register: geo_create_session
  with_items: "{{ glusterfs_georeplication_volumes }}"
  changed_when:
    - "'alread created' not in geo_create_session.stderr"
    - "'is not empty' not in geo_create_session.stderr"
  failed_when:
    - "geo_create_session.rc != 0"
    - "'already created' not in geo_create_session.stderr"
    - "'is not empty' not in geo_create_session.stderr"

- name: Spreading the pem keys on all slaves
  shell: "/usr/libexec/glusterfs/set_geo_rep_pem_keys.sh geoaccount {{ item.master_volume }} {{ item.slave_volume }}"
  with_items: "{{ glusterfs_georeplication_volumes }}"
  changed_when: false
  delegate_to: "{{ glusterfs_slave_members[0] }}"

- name: Start each geo-replicated sessions
  shell: "gluster volume geo-replication {{ item.master_volume }} geoaccount@{{ glusterfs_slave_members[0] }}::{{ item.slave_volume }} start"
  with_items: "{{ glusterfs_georeplication_volumes }}"
  changed_when: "'already started' not in starting_session.stderr"
  register: starting_session
  failed_when:
    - "starting_session.rc != 0"
    - "'already started' not in starting_session.stderr"
